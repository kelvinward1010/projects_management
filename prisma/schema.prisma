// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  name_Id         String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  isAdmin         Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  position        String?
  hasNotification Boolean?

  projectIds      String[] @db.ObjectId
  projects        Projects[] @relation(fields: [projectIds], references: [id])

  seenTaskIds     String[] @db.ObjectId
  seenEpics       Epics[] @relation("Seen", fields: [seenTaskIds], references: [id])

  epics           Epics[]
  storys          Storys[]
  tasks           Tasks[] 
  accounts        Account[]
  comments        Comment[]
  scheduleConversation ScheduleConversations[]
  notifications Notification[]
  notiProject NotiProject[]
  addStatus AddStatus[]
  reply Reply[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Projects {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String?
  createdByWho    String?
  projectLeader   String[]
  completionTime  String?
  status          String?
  createdAt       DateTime @default(now())
  isGroup         Boolean?
  isAdminCreate   Boolean?

  epicIds         String[] @db.ObjectId
  epics           Epics[]
  
  userIds         String[] @db.ObjectId
  users           User[]   @relation(fields: [userIds], references: [id])

  scheduleConversationId         String[] @db.ObjectId
  scheduleConversation           ScheduleConversations[]
  addStatus AddStatus[]
  notiProject NotiProject[]
}

model Epics {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String?
  status          String?
  image           String?
  completionTime  String?
  createdAt       DateTime @default(now())

  seenIds         String[] @db.ObjectId
  seen            User[] @relation("Seen", fields: [seenIds], references: [id])

  projectId       String? @db.ObjectId
  project         Projects? @relation(fields: [projectId], references: [id])

  creatorId       String   @db.ObjectId
  creator         User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  storys          Storys[]
}

model Storys {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  title              String?
  status             String?
  desc               String?
  assignto           String?
  image              String?
  timework           String[]
  completionTime     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  epicId             String @db.ObjectId
  projectId          String? @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  epic Epics @relation(fields: [epicId], references: [id], onDelete: Cascade)

  tasks Tasks[]
  comments          Comment[]
}

model Tasks {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  title              String?
  status             String?
  desc               String?
  assignto           String?
  image              String?
  timework           String[]
  completionTime     String?
  type               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  storyId            String @db.ObjectId
  projectId          String? @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  story Storys @relation(fields: [storyId], references: [id], onDelete: Cascade)

  comments          Comment[]
}

model AddStatus {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  label              String?
  value              String?
  isForEpics         Boolean?
  isForStorys        Boolean?
  isForInternals     Boolean?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String? @db.ObjectId
  projectId          String? @db.ObjectId

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  content            String?
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  taskId             String? @db.ObjectId
  storyId            String? @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Tasks? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  story Storys? @relation(fields: [storyId], references: [id], onDelete: Cascade)

  reply Reply[]
}

model Reply {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  content            String?
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  commentId          String? @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model ScheduleConversations {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  content            String?
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  projectId          String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Notification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  title              String
  descNoti           String
  userId             String @db.ObjectId
  projectId          String? @db.ObjectId
  epicId             String? @db.ObjectId
  storyId            String? @db.ObjectId
  taskId             String? @db.ObjectId
  whocreatedId       String? @db.ObjectId
  createdAt          DateTime @default(now())
  isSeen             Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotiProject {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId 
  title              String
  descNoti           String
  userId             String @db.ObjectId
  projectId          String? @db.ObjectId
  epicId             String? @db.ObjectId
  storyId            String? @db.ObjectId
  taskId             String? @db.ObjectId
  whocreatedId       String? @db.ObjectId
  createdAt          DateTime @default(now())
  isSeen             Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}