// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  name_Id         String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[] @db.ObjectId
  followersCount  String[] @db.ObjectId
  hasNotification Boolean?

  projectIds      String[] @db.ObjectId
  projects        Projects[] @relation(fields: [projectIds], references: [id])

  participantProjectIds String[] @db.ObjectId
  participantProjects   Tasks[] @relation("Participant", fields: [participantProjectIds], references: [id])

  tasks           Tasks[]
  accounts        Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Projects {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String?
  createdByWho    String?
  createdAt       DateTime @default(now())
  isGroup         Boolean?

  taskIds         String[] @db.ObjectId
  tasks           Tasks[]
  
  userIds         String[] @db.ObjectId
  users           User[]   @relation(fields: [userIds], references: [id])
}

model Tasks {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String?
  status          String?
  image           String?
  createdAt       DateTime @default(now())

  participantId   String[] @db.ObjectId
  participant     User[] @relation("Participant", fields: [participantId], references: [id])

  projectId       String @db.ObjectId
  project         Projects @relation(fields: [projectId], references: [id])

  creatorId       String   @db.ObjectId
  creator         User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}